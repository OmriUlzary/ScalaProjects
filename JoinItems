package OmriPlayGround

import org.apache.log4j._
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions.{round, sum}
import org.apache.spark.sql.types.{DoubleType, IntegerType, StringType, StructType}

/** Compute the total amount spent per customer in some fake e-commerce data. */
object TotalSpentByCustomerSortedDataset2 {

  case class CustomerOrders(cust_id: Int, item_id: Int, amount_spent: Double)
  case class CustomerItems(itemId: Int, itemName: String, date: String)
  /** Our main function where the action happens */
  def main(args: Array[String]) {
   
    // Set the log level to only print errors
    Logger.getLogger("org").setLevel(Level.ERROR)

    val spark = SparkSession
      .builder
      .appName("TotalSpentByCustomer")
      .master("local[*]")
      .getOrCreate()

    // Create schema when reading customer-orders
    val customerOrdersSchema = new StructType()
      .add("cust_id", IntegerType,nullable = true)
      .add("item_id", IntegerType,nullable = true)
      .add("amount_spent", DoubleType,nullable = true)

    // Load up the data into spark dataset
    // Use default separator (,), load schema from customerOrdersSchema and force case class to read it as dataset
    import spark.implicits._
    val customerDS = spark.read
      .schema(customerOrdersSchema)
      .csv("data/customer-orders.csv")
      .as[CustomerOrders]

    val customerItemsSchema = new StructType()
      .add("itemId", IntegerType,nullable = true)
      .add("itemName", StringType,nullable = true)
      .add("date", DoubleType,nullable = true)

    val customerDS2 = spark.read
      .schema(customerItemsSchema)
      .csv("data/item")
      .as[CustomerItems]

    val oreders = customerDS.select("item_id", "cust_id", "amount_spent")

    val items = customerDS2.select("itemId", "itemName", "date")

    val JoinItems = oreders.
      join(items, oreders("item_id") === items("itemId"),"left")

    val totalByCustomer = customerDS
      .groupBy("cust_id")
      .agg(round(sum("amount_spent"), 2)
        .alias("total_spent_customer"))

    val totalByCustomerSorted = totalByCustomer.sort("total_spent_customer")

    println("Total spend by customer:")
    totalByCustomerSorted.show(totalByCustomer.count.toInt)

    val totalByItem = customerDS
      .groupBy("item_id")
      .agg(round(sum("amount_spent"), 2)
        .alias("total_spent_item"))

    val totalByItemSorted = totalByItem.sort("total_spent_item")
    println("Total spend by item:")
    totalByItemSorted.show(totalByItem.count.toInt)
    val JoinItems2 = JoinItems.select("item_id", "itemName", "amount_spent")


    val totalByItemName = JoinItems2
      .groupBy("item_id", "itemName")
      .agg(round(sum("amount_spent"), 2)
        .alias("total_spent_item_name"))

    val totalByItemNameSorted = totalByItemName.sort("total_spent_item_name")

    println("Total spend by item name:")

    totalByItemNameSorted.show(totalByItemName.count.toInt)
  }
  
}

